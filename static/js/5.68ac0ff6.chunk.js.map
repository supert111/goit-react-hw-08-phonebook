{"version":3,"sources":["components/ContactForm/ContactForm.module.css","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","redux/contacts/contacts-operations.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","views/ContactsView.js","../node_modules/shortid/lib/alphabet.js","App.module.css"],"names":["module","exports","require","alphabet","build","isValid","clusterWorkerId","generate","seed","seedValue","worker","workerId","characters","newCharacters","undefined","shuffled","nextValue","_seed_","counter","previousSeconds","str","seconds","Math","floor","Date","now","random","format","number","done","loopCounter","get","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","push","mask","log","length","LN2","step","id","RegExp","replace","test","getIsLoading","state","loading","searchFilter","createSelector","contacts","filter","caseInsensitive","toLowerCase","contact","name","includes","nameInputId","shortid","phoneInputId","ContactForm","handleChange","element","target","value","setState","handleSubmit","el","preventDefault","props","onSubmit","className","styles","wrapper","this","htmlFor","input_display","type","pattern","title","required","onChange","label_block","button_prime","Component","connect","dispatch","addContactRequest","axios","post","then","data","addContactSuccess","catch","error","addContactError","message","addContact","phoneBook","onDeleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","map","nameContact","button","onClick","e","searchByFilter","ContactsView","handleFilter","fetchContact","Container","title_Phonebook","title_Contacts","isLoading","fetchContactRequest","fetchContactSuccess","fetchContactError","previousSeed","randomFromSeed","ORIGINAL","reset","setCharacters","_alphabet_","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","splice","shuffle","lookup","index"],"mappings":"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","file":"static/js/5.68ac0ff6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactForm_wrapper__2c26r\",\"input_display\":\"ContactForm_input_display__3y2r8\",\"button_prime\":\"ContactForm_button_prime__30wU4\",\"label_block\":\"ContactForm_label_block__RlqAl\"};","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__2Ir3K\",\"contact\":\"ContactList_contact__2j7Wc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_display\":\"Filter_input_display__1V3hr\"};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getIsLoading = state => state.state.loading;\r\nexport const getFilter = state => state.state.filter;\r\nexport const getAllContacts = state => state.state.contacts;\r\n\r\n//memoization\r\nexport const searchFilter = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const caseInsensitive = filter.toLowerCase();\r\n\r\n        return contacts.filter(contact => \r\n            contact.name.toLowerCase().includes(caseInsensitive)\r\n        );\r\n    }\r\n);\r\n\r\n\r\n///////////////////////////////////////////////////\r\n// export const searchFilter = state => {\r\n//     const contacts = getAllContacts(state);\r\n//     const filter = getFilter(state);\r\n//     const caseInsensitive = filter.toLowerCase();\r\n\r\n//     return contacts.filter(contact => \r\n//         contact.name.toLowerCase() === caseInsensitive)\r\n// }","import PropTypes from 'prop-types';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport styles from \"./ContactForm.module.css\";\r\nimport shortid from 'shortid';\r\nimport { addContact } from '../../redux/contacts';\r\n\r\nconst nameInputId = shortid.generate();\r\nconst phoneInputId = shortid.generate();\r\n\r\nclass ContactForm extends Component { \r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n\r\n    handleChange = (element) => {\r\n        const { name, value } = element.target;\r\n        this.setState ({ [name]: value }); \r\n    };\r\n\r\n    handleSubmit = (el) => {\r\n        el.preventDefault();\r\n        this.props.onSubmit(this.state);\r\n        this.setState({ name: '', number: '' });\r\n    }\r\n\r\n   render() {\r\n        return (\r\n            \r\n                <form className={styles.wrapper} onSubmit={this.handleSubmit}>\r\n                    <label htmlFor={nameInputId}>Name\r\n                        <input className={styles.input_display}\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                            required\r\n                            id={nameInputId}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </label>\r\n                    <label className={styles.label_block} htmlFor={phoneInputId}>Number\r\n                        <input className={styles.input_display}\r\n                            type=\"tel\"\r\n                            name=\"number\"\r\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                            required\r\n                            id={phoneInputId}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </label>\r\n                    <button className={styles.button_prime} type=\"submit\" >Add contact</button>\r\n                </form>            \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n  };\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) => dispatch(addContact( name, number )),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","// import axios from 'axios';\r\n// import {\r\n//     fetchContactRequest,\r\n//     fetchContactSuccess,\r\n//     fetchContactError,\r\n//     addContactSuccess,\r\n//     addContactRequest,\r\n//     addContactError,\r\n//     deleteContactRequest,\r\n//     deleteContactSuccess,\r\n//     deleteContactError,\r\n// } from './contacts-actions';\r\n\r\n// axios.defaults.baseURL = 'http://localhost:4040';\r\n\r\n// export const fetchContacts = () => async dispatch => {\r\n//     dispatch(fetchContactRequest());\r\n\r\n//     try {\r\n//         const { data } = await axios.get('/contacts');\r\n//         console.log('fetchContacts', data)\r\n//         dispatch(fetchContactSuccess(data));\r\n//     } catch (error) {\r\n//         dispatch(fetchContactError(error));\r\n//     }\r\n// };\r\n\r\n// export const addContact = ({name, number}) => async dispatch => {\r\n//     const contact = {name, number};\r\n    \r\n//     dispatch(addContactRequest());\r\n//     try {\r\n//         const { data } = await axios.post('/contacts', contact);\r\n//         console.log('add', data)\r\n//         dispatch(addContactSuccess(data));\r\n//     } catch (error) {\r\n//         dispatch(addContactError(error));\r\n//     }\r\n// };\r\n\r\n// export const deleteContact = contactId => async dispatch => {\r\n//     dispatch(deleteContactRequest());\r\n\r\n//     try {\r\n//         const { data } = await axios.delete(`/contacts/${contactId}`);\r\n//         console.log('delete', data)\r\n//         dispatch(deleteContactSuccess(data))\r\n//     } catch (error) {\r\n//         dispatch(deleteContactError(error))\r\n//     }\r\n// };\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////\r\nimport axios from 'axios';\r\nimport {\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n    addContactSuccess,\r\n    addContactRequest,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n} from './contacts-actions';\r\n\r\n//axios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactRequest());\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(({data}) => dispatch(fetchContactSuccess(data)))\r\n        .catch(error => dispatch(fetchContactError(error.message)));\r\n};\r\n\r\nexport const addContact = ({name, number}) => dispatch => {\r\n    const contact = {name, number};\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({data}) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error.message)));\r\n}\r\n\r\nexport const deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error.message)));\r\n};","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\nimport { deleteContact, searchFilter } from '../../redux/contacts';\r\n\r\nconst ContactList = ({ phoneBook, onDeleteContact }) => {\r\n  return (\r\n      <ul>\r\n        {phoneBook.map(nameContact => (\r\n          <li className={styles.contact} key={nameContact.id}>{nameContact.name}: {nameContact.number}\r\n            <button className={styles.button} type=\"button\" onClick={()=>onDeleteContact(nameContact.id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n  )\r\n};\r\n\r\nContactList.propTypes = {\r\n    phoneBook: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      }),\r\n    ),\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  phoneBook: searchFilter(state),\r\n})\r\n\r\nconst mapDispatchProps = dispatch => ({\r\n  onDeleteContact: (id) => dispatch(deleteContact(id)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(ContactList);","import React from \"react\";\r\nimport styles from \"./Filter.module.css\"\r\nimport { connect } from 'react-redux';\r\nimport {searchByFilter} from '../../redux/contacts';\r\n\r\nconst Filter = ({onChange}) => {\r\n    return (\r\n        <label>Find contacts by name\r\n            <input className={styles.input_display}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                onChange={onChange}\r\n            />\r\n        </label>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(searchByFilter(e.target.value)),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Filter);","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport Container from '../components/Container';\r\nimport ContactForm from \"../components/ContactForm\";\r\nimport ContactList from \"../components/ContactList\";\r\nimport Filter from \"../components/Filter\";\r\nimport { fetchContacts, getIsLoading } from '../redux/contacts';\r\nimport styles from \"../../src/App.module.css\";\r\n\r\nclass ContactsView extends Component { \r\n\r\n    state = {};\r\n\r\n    componentDidMount() {\r\n        this.props.fetchContact();\r\n    }\r\n\r\n    handleFilter = (element) => {\r\n        const { value } = element.target;\r\n        this.setState ({ filter: value });  \r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container>    \r\n                <div className={styles.wrapper}>\r\n                    <h1 className={styles.title_Phonebook}>Phonebook</h1>\r\n                    <ContactForm /> \r\n                    <h2 className={styles.title_Contacts}>Contacts</h2>\r\n                    <Filter /> \r\n                    {this.props.isLoading && <h1>Loading...</h1>}\r\n                    <ContactList />\r\n                </div>\r\n            </Container>          \r\n        )\r\n    }\r\n}\r\n  \r\nconst mapStateToProps = state => ({\r\n    isLoading: getIsLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchContact: () => dispatch(fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__1sVCB\",\"title_Phonebook\":\"App_title_Phonebook__2vxh3\",\"title_Contacts\":\"App_title_Contacts__whCrV\",\"title_error\":\"App_title_error__3XKq8\"};"],"sourceRoot":""}